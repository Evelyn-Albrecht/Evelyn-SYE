---
title: "Experimenting with cameras based on trapping book"
format: html
editor: visual
---

# Chapter 5

## Install packages

```{r}
rm(list=ls())
source("TEAM library 1.7.R")
library(tidyverse)
library("here")
library(chron) 
library(reshape)
library (vegan)
library(plotrix)
library(maptools)
# new for chapter 6 
library(unmarked)
library(AICcmodavg)
library(MuMIn)
library(R2jags)
```

## Read in the data

```{r}
cams <-read.csv(here("Data","Pre_2020_cam_data.csv"))
```

## Descriptive analysis

### Get data for camera trap days

```{r}
camera_days<-cam.days(data,2020) # creates a new dataframe with a new column with the number of days within each unique range of time 
# we already have this variable accounted for in our data (ndays)
summary(camera_days[,2:4]) # just summarises the mean, 1st, 3rd, min, max for each column
write.table(camera_days, file="camera_days_2009.txt",quote=F, sep="\t",row.names = F) 
#turn into the a table
```

### Independent events per time interval

Thresh is a variable created here i think

```{r}
events_hh<-event.sp(dtaframe=cams, year=2020, thresh=60) #  thresh in minutes
events_dd<-event.sp(dtaframe=cams, year=2020, thresh=1440) # number of minutes in a day
# creates a matrix with the sampling unit and the presence of species (number of detection)
```

saving away tables with events by species and camera site

```{r}
write.table(events_hh, file="events_hh.txt",quote=F, sep="\t")
write.table(events_dd, file="events_dd.txt",quote=F, sep="\t")
```

### Cumulative events per species (tables)

```{r}
events_hh_species<-colSums(events_hh)
write.table(events_hh_species, file="events_hh_species.txt", quote=F, sep="\t")

events_dd_species<-colSums(events_dd)
write.table(events_dd_species, file="events_dd_species.txt",quote=F, sep="\t")
```

### Cumulative events per site

```{r}
cameras<-rowSums(events_hh)
write.table(cameras, file="events_species.txt",quote=F, sep="\t")
```

## Naive Occupancy

```{r}
yr2009<-data[data$Sampling.Event =="2009.01" & data$Class=="MAMMALIA",] #I don't think we have to do this
mat<-f.matrix.creator(yr2009) # list of matrices camera x days for each species
# matrix of 124 x 58 - the 58 sampling units 
naive_occu_2009<-naive(mat) # get naive occupancy for each species


write.table(naive_occu_2009, file="naive_occu_2009.txt",quote=F, sep="\t",row.names = F)

```

# Chapter 6

## loading in data

basically recapping stuff from chapter 5

```{r}
team_data<-read.csv(file="teamexample.csv", sep=",",h=T,stringsAsFactors=F) #do 
#can skip the rest in this chunk for my data 
iucn.full<-read.csv("IUCN.csv", sep=",",h=T)
iucn<-iucn.full[,c("Class","Order","Family","Genus","Species")]
team<-merge(iucn, team_data, all.y=T)
fd<-fix.dta(team)
yr2009<-fd[fd$Sampling.Event =="2009.01" & fd$Class=="MAMMALIA",]
```

## Load co-variate data

can probably skip most of them, - need to standardize

```{r}
cov<-read.table("covariates.txt", header=TRUE) # table row per sampling unit
workingcam<-which(cov$Sampling.Unit.Name %in% unique(yr2009$Sampling.Unit.Name)) # removing cameras that did not work
cov.or<-cov[workingcam, ] # retain only working cameras in 2009
#we are using the cameras for all years and they are all working
cov.num<-cov.or[,sapply(cov.or,is.numeric)]
cov.std<-decostand(cov.num,method="standardize")
cov.fac<-cov.or[,sapply(cov.or,is.factor)]  # extract factor variables
covs<-data.frame(cov.fac, cov.std)
covs
```

## Create matrices for each species

remeber mat is cam x day 0 or 1 y/n

```{r}
mat.udz.09<-f.matrix.creator(yr2009)
names(mat.udz.09) # each species has its own table 
# I could just do this whole thing and then just export the two tables for porcupine and fisher 
naivetable<-naive(mat.udz.09) 
naivetable
```

## Case study - single species

### get new table?

```{r}
Cs<-shrink(mat.udz.09[["Cercocebus sanjei"]],5)
umCs<-unmarkedFrameOccu(y=Cs,siteCovs= covs)
```

### Creates models for variables

```{r}
m0<- occu(~1~1,umCs)
d1<- occu(~edge~1,umCs)
d2<- occu(~border~1,umCs)
d3<- occu(~edge+border~1,umCs)
o1<- occu(~1~border,umCs)
o2<- occu(~1~habitat,umCs)
o3<- occu(~1~habitat+border,umCs)
m1<- occu(~edge~border,umCs)         
m2<- occu(~border~border,umCs)
m3<- occu(~edge+border~border,umCs)  
m4<- occu(~edge~habitat,umCs)
m5<- occu(~border~habitat,umCs)
m6<- occu(~edge+border~habitat,umCs)
m7<- occu(~edge+border~habitat+border,umCs)
```

### Examine one model

```{r}
m1
backTransform(linearComb(m1, coefficients = c(1, 0), type = "det")) 
backTransform(linearComb(m1, coefficients = c(1, 0), type = "state"))
```

### Find model of best fit

```{r}
dlist<-fitList(Nullo = m0,d1=d1,d2=d2,d3=d3,o1=o1,o2=o2,o3=o3,m1=m1,m2=m2,m3=m3,m4=m4,m5=m5,m6=m6,m7=m7)
selmod<-modSel(dlist,nullmod="Nullo")
selmod
```

```{r}
newhab<-data.frame(habitat=c("Deciduous","Montane"))
pred<-predict(o2,type="state",newdata=newhab,appendData=T)
```

```{r}
ggplot(pred,aes(x=habitat,y=Predicted))+
  geom_point(size=4) +
  ylab("Predicted Psi Cercocebus sanjei") +
  theme_bw()+
  geom_errorbar(aes(ymin=Predicted-SE, ymax=Predicted+SE), width=.2)
```
