---
title: "Column creation experimentation"
format: html
editor: visual
---

In this document, I seek to explore how to create new columns within my dataframe with a total sum of the variable across columns

# Land use data

## Setting up

lets clear the environment and load the packages

```{r}
rm(list = ls())
library(tidyverse)
library("here")
library(janitor) #please specify what it does
```

suck in the data.

```{r}
landuse <- read.csv(here("Data","Buffers_landuse_full.csv"))
```

take a look at the data

**I am uncomfortable that the units for all of the area columns are not "baked in" to the column names and that the column names don't make intuitive sense. Please see my feedback in `Data_preparation.qmd`** and go through and fix the the code there since this file depends on files you made there.

```{r}
glimpse(landuse)
```

### Pre-emtively altering column names

Note the column names. the buffer name column is named x and the landuse classes all have Xs in front of them

lets start by renaming the buffer column

colnames(dataframe)\[column in question\] \<- "new_name"

```{r}
colnames(landuse)[1] <- "_Buffer" #I put a "_" as the first character because the formula I am using to get rid of the X from the other columns deletes the first character. which i need to do later once ive combined the column names way later 
```

**you can skip this hassle almost entirely if you make sure to add coherent, systematic column names when you are creating these objects. See my comments in `Data_preparation.qmd`**

## Creating new columns

### Creating a new dataframe with totals

First we are going to create a new dataframe with only the columns that we want to get the sums of. In this case it is columns 2-16.

the recommendation is to make a list but i am going rouge

```{r}
landuse_w_totals <- landuse %>%
  mutate(total_area = rowSums(across(where(is.numeric))))  #this is nice code!
```

**what if you did above code but just to landuse so that you don't keep adding more and more dataframes to your project? Just add the new column to landuse. Like this:**

```{r}
landuse <- landuse %>% mutate(total_area = rowSums(across(where(is.numeric)))) 
```

lets take a look at what we've made

```{r}
glimpse(landuse_w_totals)
```

### Adding percent columns

now we see that there is a new column with the total area

now we need to create 15 more columns each representing the percent of the area that they make up.

create new list with the formula

```{r}
p_open_water <- landuse_w_totals$X11/landuse_w_totals$total_area
```

```{r}
landuse_w_percents <- landuse_w_totals %>%
  mutate(percent_open_water = p_open_water)
```

**Can you think of a way to combine the last two code chunks so that you don't have to crreate the p_open_water object as an "extra"? What about this:**

```{r}
landuse <- landuse %>% mutate(
  p_open_water = X11/total_area
)
```

**Notice that with my code, we still just have one object, landuse, to which we are adding.**

Now delete the new Value I just created to keep the environment a bit less cluttered

```{r}
rm(p_open_water)
```

If I am deleting in the end can I just reuse that. im gonna do that now and fix it later if need be

developed open space

```{r}
percent <- (landuse_w_totals$X21/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_open_space = percent) #note that instead of working within the landuse_w_total_, now we are working in landuse_w_percent
```

```{r}
rm(percent)
```

#### Repeat for each landclass

developed low intensity

```{r}
percent <- (landuse_w_totals$X22/landuse_w_totals$total_area) *100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_low_intensity = percent) 
```

```{r}
rm(percent)
```

developed medium inensity

```{r}
percent <- (landuse_w_totals$X23/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_medium_intensity = percent) 
```

```{r}
rm(percent)
```

developed high intensity

```{r}
percent <- (landuse_w_totals$X23/landuse_w_totals$total_area) *100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_high_intensity = percent) 
```

```{r}
rm(percent)
```

barren land

```{r}
percent <- (landuse_w_totals$X31/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_barren_land = percent) 
```

deciduous forest

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X41/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_deciduous_forest = percent) 
```

Evergreen forest

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X42/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_evergreen_forest = percent) 
```

Mixed forest

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X43/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_mixed_forest = percent) 
```

Shrub/Scrub

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X52/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_shrub_scrub = percent) 
```

```{r}
rm(percent)
```

Grassland herbaceous

```{r}
percent <- (landuse_w_totals$X71/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_grassland_herbaceous = percent) 
```

```{r}
rm(percent)
```

\`Pasture hay

```{r}
percent <- (landuse_w_totals$X81/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_pasture_hay = percent) 
```

```{r}
rm(percent)
```

Cultivated crops

```{r}
percent <- (landuse_w_totals$X82/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_cultivated_crops = percent) 
```

```{r}
rm(percent)
```

Woody wetlands

```{r}
percent <- (landuse_w_totals$X90/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_woody_wetlands = percent) 
```

```{r}
rm(percent)
```

Emergent herbaceous wetlands

```{r}
percent <- (landuse_w_totals$X95/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_emergent_herbaceous_wetlands = percent) 
```

```{r}
rm(percent)
```

**So this is all good, but see if you can follow my lead to just do it all in the landuse object to keep things clean.**

we can actually just condense

### Additional Columns

We would also like to know how much is forest and how much is developed and forest. to do this we need to add up the respective columns.

#### Developed lands

```{r}
landuse_w_percents <- landuse_w_percents %>% 
  mutate(total_developed = X21 + X22 + X23 + X24)
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed = (total_developed/total_area)*100)
```

#### Forests

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(total_forest = X41 + X42 + X43)
```

```{r}
landuse_w_percents <- landuse_w_percents %>% 
  mutate(percent_forest=(total_forest/total_area)*100)
```

# Road data

lets pull in the road data

distsnce \* distance \* pi

```{r}
roads <- read.csv(here("Data","camera_buffer_roads.csv"))
```

link the buffer and the total area

seperate file documenting the buffer type, radius, and area also read in

```{r}
buffers <- read.csv(here("Data","Buffer_areas.csv"))
```

**since i think you based the typical buffer sizes based on the literature, and since the literature (I think - correct me if I'm wrong) was reporting typical home ranges in hectares, I think you should convert stuff to hectares.**

merge the two dataframes?\
change the name of the colums so they are the same. lets do this within the roads

```{r}
colnames(roads)[c(4)] <- "radius"
```

merge them now

```{r}
buffers_roads <- merge(roads,buffers)
```

lets get rid of the two other frames now that we have merged them

```{r}
rm(roads)
rm(buffers)
```

now we can make a new column with the fraction of the total area

```{r}
fraction_road <- buffers_roads$Shape_Leng/buffers_roads$area_sq_m
```

```{r}
buffers_roads <- buffers_roads %>%
  mutate(fraction_area_road = fraction_road) #I think you should call this "road_density_m_per_sq_m" or something
```

```{r}
rm(fraction_road)
```

now to make percent column

```{r}
buffers_roads <- buffers_roads %>%
  mutate(percent_area_road = fraction_area_road * 100)
```

**we don't think of road density in terms of a percentage. If the values are really tiny, then sometimes people scale it up (e.g. instead of m road per square meter, they might do m road per 100 square meters or similar... I think you should be using hectares and not square meters as your area unit anyway.**

This theoretically is what I want but it will have to be rotated merged and shifted

# experimenting

I want the the names to match between so I will unify the names of the buffers

bring in the codes

```{r}
codes<-read.csv(here("Data","Buffer_landuse_codes.csv"))
```

change the names of the coulms so they make more sense and match with the other frame

colnames(dataframe)\[column in question\] \<- "new_name"

```{r}
colnames(codes)[1]<- "_Buffer"
colnames(codes)[2] <- "Buffers"
```

Now we can merge the landuse and buffers together

```{r}
landuse_w_percents<- merge(codes,landuse_w_percents)
```

now we can delete "\_Buffers"

```{r}
landuse_w_percents$`_Buffer` <- NULL
```

lets export this for now for ease of use

```{r}
write.csv(landuse_w_percents, here("Data","Buffer_landuse_percents.csv"), row.names = F) #use row.names = F to keep from getting weird X column
```

I am also going to change the names of the buffers in buffer_roads

we will use the paste() function

```{r}
buffers_roads$ORIG_FID <- as.factor(buffers_roads$ORIG_FID)
```

```{r}
buffers_roads$Buffers <- paste(buffers_roads$buffer,buffers_roads$ORIG_FID, sep = "_")
```

from this data we only really need the road density. so lets get a summary of the totals

```{r}
road_density_buffer <- buffers_roads %>%
  group_by(Buffers) %>%
  summarise(road_denisty=sum(percent_area_road))
```

**you may wish to fix this code so that it isn't using the percent_area_road since that is not the units you want for road density**

```{r}
write.csv(road_density_buffer, here("Data","Road_density.csv"), row.names = F) #use row.names = F
```

maybe transpose as well

```{r}
transpose_road_densiry <- t(road_density_buffer)
```

```{r}
transpose_road_densiry <- transpose_road_densiry %>%
  row_to_names(row_number = 1)
```

in the end we want our data formatted a certian way. we want each row to be a camera, not a buffer

doesnt work anymore cause changes

```{r}
df <- slice(landuse_w_percents, 34)
```

```{r}
df <- setNames(df, paste(names(df), "pepe_max", sep = "_"))
```

**the problem with this method is that it is not reproducible. it is not clear from the code why/how you are slicing row 34, then 33, etc.**

```{r}
df2 <- slice(landuse_w_percents,33)
```

```{r}
df2 <- setNames(df2, paste(names(df), "pepe_min"))
```

```{r}
combinded <- merge(df2,df)
```

It worked. Would need to do this 6 times for each camera and then repeat that process 86 times. I would like to try and learn to write a loop to do this

\*sapply and lapply (for possibly looping but better)

## Test


library(stringr) names(df1)=str_sub(names(df1),2)

**I think that I was pointing you in the wrong direction. What we need here now is a column that identifies the camera with which each row (buffer) is associated.**

```{r}

my_col_names <- names(landuse_w_percents[2:35])
test <- landuse_w_percents %>% 
  pivot_wider(names_from = Buffers, values_from =my_col_names )
``
