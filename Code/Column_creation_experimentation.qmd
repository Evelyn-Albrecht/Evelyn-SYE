---
title: "Column creation experimentation"
format: html
editor: visual
---

In this document, I seek to explore how to create new columns within my dataframe with a total sum of the variable across columns

# Land use data

## Setting up

lets clear the environment and load the packages

```{r}
rm(list = ls())
library(tidyverse)
library("here")
library(janitor)
```

suck in the data.

```{r}
landuse <- read.csv(here("Data","Buffers_landuse_full.csv"))
```

take a look at the data

```{r}
glimpse(landuse)
```

### Pre-emtively altering column names

Note the column names. the buffer name column is named x and the landuse classes all have Xs in front of them

lets start by renaming the buffer column

colnames(dataframe)\[column in question\] \<- "new_name"

```{r}
colnames(landuse)[1] <- "_Buffer" #I put a "_" as the first character because the formula I am using to get rid of the X from the other columns deletes the first character. which i need to do later once ive combined the column names way later 
```

## Creating new columns

### Creating a new dataframe with totals

First we are going to create a new dataframe with only the columns that we want to get the sums of. In this case it is columns 2-16.

the recommendation is to make a list but i am going rouge

```{r}
landuse_w_totals <- landuse %>%
  mutate(total_area = rowSums(across(where(is.numeric))))
```

lets take a look at what we've made

```{r}
glimpse(landuse_w_totals)
```

### Adding percent columns

now we see that there is a new column with the total area

now we need to create 15 more columns each representing the percent of the area that they make up.

create new list with the formula

```{r}
p_open_water <- landuse_w_totals$X11/landuse_w_totals$total_area
```

```{r}
landuse_w_percents <- landuse_w_totals %>%
  mutate(percent_open_water = p_open_water)
```

Now delete the new Value I just created to keep the environment a bit less cluttered

```{r}
rm(p_open_water)
```

If I am deleting in the end can I just reuse that. im gonna do that now and fix it later if need be

developed open space

```{r}
percent <- (landuse_w_totals$X21/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_open_space = percent) #note that instead of working within the landuse_w_total_, now we are working in landuse_w_percent
```

```{r}
rm(percent)
```

#### Repeat for each landclass

developed low intensity

```{r}
percent <- (landuse_w_totals$X22/landuse_w_totals$total_area) *100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_low_intensity = percent) 
```

```{r}
rm(percent)
```

developed medium inensity

```{r}
percent <- (landuse_w_totals$X23/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_medium_intensity = percent) 
```

```{r}
rm(percent)
```

developed high intensity

```{r}
percent <- (landuse_w_totals$X23/landuse_w_totals$total_area) *100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed_high_intensity = percent) 
```

```{r}
rm(percent)
```

barren land

```{r}
percent <- (landuse_w_totals$X31/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_barren_land = percent) 
```

deciduous forest

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X41/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_deciduous_forest = percent) 
```

Evergreen forest

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X42/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_evergreen_forest = percent) 
```

Mixed forest

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X43/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_mixed_forest = percent) 
```

Shrub/Scrub

```{r}
rm(percent)
```

```{r}
percent <- (landuse_w_totals$X52/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_shrub_scrub = percent) 
```

```{r}
rm(percent)
```

Grassland herbaceous

```{r}
percent <- (landuse_w_totals$X71/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_grassland_herbaceous = percent) 
```

```{r}
rm(percent)
```

\`Pasture hay

```{r}
percent <- (landuse_w_totals$X81/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_pasture_hay = percent) 
```

```{r}
rm(percent)
```

Cultivated crops

```{r}
percent <- (landuse_w_totals$X82/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_cultivated_crops = percent) 
```

```{r}
rm(percent)
```

Woody wetlands

```{r}
percent <- (landuse_w_totals$X90/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_woody_wetlands = percent) 
```

```{r}
rm(percent)
```

Emergent herbaceous wetlands

```{r}
percent <- (landuse_w_totals$X95/landuse_w_totals$total_area)*100
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_emergent_herbaceous_wetlands = percent) 
```

```{r}
rm(percent)
```

we can actually just condense

### Additional Columns

We would also like to know how much is forest and how much is developed and forest. to do this we need to add up the respective columns.

#### Developed lands

```{r}
landuse_w_percents <- landuse_w_percents %>% 
  mutate(total_developed = X21 + X22 + X23 + X24)
```

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(percent_developed = (total_developed/total_area)*100)
```

#### Forests

```{r}
landuse_w_percents <- landuse_w_percents %>%
  mutate(total_forest = X41 + X42 + X43)
```

```{r}
landuse_w_percents <- landuse_w_percents %>% 
  mutate(percent_forest=(total_forest/total_area)*100)
```

# Road data

lets pull in the road data

distsnce \* distance \* pi

```{r}
roads <- read.csv(here("Data","camera_buffer_roads.csv"))
```

link the buffer and the total area

seperate file documenting the buffer type, radius, and area also read in

```{r}
buffers <- read.csv(here("Data","Buffer_areas.csv"))
```

merge the two dataframes?\
change the name of the colums so they are the same. lets do this within the roads

```{r}
colnames(roads)[c(4)] <- "radius"
```

merge them now

```{r}
buffers_roads <- merge(roads,buffers)
```

lets get rid of the two other frames now that we have merged them

```{r}
rm(roads)
rm(buffers)
```

now we can make a new column with the fraction of the total area

```{r}
fraction_road <- buffers_roads$Shape_Leng/buffers_roads$area_sq_m
```

```{r}
buffers_roads <- buffers_roads %>%
  mutate(fraction_area_road = fraction_road)
```

```{r}
rm(fraction_road)
```

This theoretically is what I want but it will have to be rotated merged and shifted

# experimenting

I want the the names to match between so I will unify the names of the buffers

bring in the codes

```{r}
codes<-read.csv(here("Data","Buffer_landuse_codes.csv"))
```

change the names of the coulms so they make more sense and match with the other frame

colnames(dataframe)\[column in question\] \<- "new_name"

```{r}
colnames(codes)[1]<- "_Buffer"
colnames(codes)[2] <- "Buffers"
```

Now we can merge the landuse and buffers together

```{r}
landuse_w_percents<- merge(codes,landuse_w_percents)
```

now we can delete "\_Buffers"

```{r}
landuse_w_percents$`_Buffer` <- NULL
```

lets export this for now for ease of use

```{r}
write.csv(landuse_w_percents, here("Data","Buffer_landuse_percents.csv"))
```

I am also going to change the names of the buffers in buffer_roads

we will use the paste() function

```{r}
buffers_roads$ORIG_FID <- as.factor(buffers_roads$ORIG_FID)
```

```{r}
buffers_roads$Buffers <- paste(buffers_roads$buffer,buffers_roads$ORIG_FID, sep = "_")
```

from this data we only really need the road density. so lets get a summary of the totals

```{r}
road_density_buffer <- buffers_roads %>%
  group_by(Buffers) %>%
  summarise(road_denisty=sum(percent_area_road))
```

```{r}
write.csv(road_density_buffer, here("Data","Road_density.csv"))
```

maybe transpose as well

```{r}
transpose_road_densiry <- t(road_density_buffer)
```

```{r}
transpose_road_densiry <- transpose_road_densiry %>%
  row_to_names(row_number = 1)
```

in the end we want our data formatted a certian way. we want each row to be a camera, not a buffer

doesnt work anymore cause changes

```{r}
df <- slice(landuse_w_percents, 34)
```

```{r}
df <- setNames(df, paste(names(df), "pepe_max", sep = "_"))
```

```{r}
df2 <- slice(landuse_w_percents,33)
```

```{r}
df2 <- setNames(df2, paste(names(df), "pepe_min"))
```

```{r}
combinded <- merge(df2,df)
```

It worked. Would need to do this 6 times for each camera and then repeat that process 86 times. I would like to try and learn to write a loop to do this

\*sapply and lapply (for possibly looping but better)

## Test

```{r}

my_col_names <- names(landuse_w_percents[2:35])
test <- landuse_w_percents %>% 
  pivot_wider(names_from = Buffers, values_from =my_col_names )
```
