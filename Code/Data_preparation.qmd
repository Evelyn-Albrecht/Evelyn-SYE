---
title: "Data Preparation"
author: "Evelyn Albrecht"
format: html
editor: visual
---

# Setting Up

### Clearing R's environment

```{r}
rm(list=ls())
```

### Loading relevant packages

```{r}
library(tidyverse) #bunch of packages combined to be one 
library(here) #assists in importing data sets 
library(vegan) #allows one to reshape dataframes  ## vegan doesn't do reshaping  it is for diversity analysis and community analysis
library(ggplot2) #for plotting data ## you don't need it since you called tidyverse
library(stringr) #for changing strings ##also part of the tidyverse so you don't need it
```

# Data Clean-up

## Road Data

Import the data and give it a name

```{r}
roads <- read.csv(here("Data","Camera_buffer_roads.csv"))
```

preview the data

```{r}
glimpse(roads)
```

I'm worried that you're going to lose track of which camera is which. I wonder if you can keep (from ArcGIS) or add via a join a column that has `camera_sdcard` and a column for latitude and a column for longitude.

What we intend to use this data for is to determine the road density withing a buffer. Therefore we are going to need to rearrange this data so that we have a row entry per buffer and a total amount of road within it. The issue is that GIS takes takes the amount of road and segments it. It also has different entries for each of the roads that may be within the buffer.

Lets think about how I am actually going to do this

What I need as an end result is two new columns, one that will represent the total length and one that represents each buffer. **represents what about each buffer? The area? Remember that road density is represented as road_length_km per area_square_km (or road_length_m/area_square_m) - you could also consider using hectares as your area unit, so it might make the most sense to do m or km road per hectare.**

**I'm confused - Doesn't Shape_Length indicate the length of road inside each buffer? Also, as per our lessons on data management in biostats, consider adding units to the column name such as `road_length_m`**.

We need to consolidate **consolidate what?**

a prerequisite to any grouping is conversions of some values into factors. There are multiple variables that all represent the same thing, the buffer ID. We just need to choose one to convert and use for our variable.

I will choose to convert the variable cam_buffer into a factor variable

```{r}
roads$cam_buffer <- as.factor(roads$cam_buffer)
```

If we glimpse again we can see that it is now registered as a factor with 287 levels. Because we have a total of 516 buffers, this means that there is not necessarily a road within each buffer. This means that there will be gaps and N/As that we will have to mind when joining this dataframe(or the new one we create) to the landuse one.

Lets create a new dataframe "buffers_roads"

```{r}
buffer_roads <- roads %>%
     group_by(cam_buffer) %>%
     summarise(
          total_length = sum(Shape_Leng)
     )
```

Lets take a quick look at this new dataframe

```{r}
view(buffer_roads)
```

looks good but I may have to figure out how to add a zero before the 1-9 numbers because it messes with the order. **what is the problem with the order?**

now we shall export the dataframe

```{r}
write.csv(buffer_roads, here("Data","Buffers_roads.csv"),row.names = F)# add row.names = F when you write csv files to prevent the strange "X" in column names and to prevent addition of extra columns when you read in the data
```

We now have a new csv file containing only this data. yay! **good work!**

## Water Bodies Data

I may or may not use this data set. I am realizing taking a second look in ArcGISpro that some of the water bodies is not identifiable on it.

it may just be better to just use the raster data.

## Landuse Data

Before moving onto altering the landuse data, let's clear our environment again

```{r}
rm(list = ls())
```

### reading in and merging datasets

because GIS wouldnt export all 516 values in the table at once (**this is very puzzling to me...but I believe you!)**, I divided the exports into three csv files, one for fishers, one for female porcupines, and one for male porcupines. here I will merge them all together.

Read in the three datasets

```{r}
fishers <- read.csv(here("Data","PEPE_landuse.csv"))
porcupines_f <- read.csv(here("Data","ERDO_F_landuse.csv"))
porcupines_m <- read.csv(here("Data","ERDO_M_landuse.csv"))
```

**I'm very uncomfortable with how all of the rows and columns are named here without any explaination in the qmd file. I'd also like to see you add a column that has the land use category change the column names to correspond to the actual things that the columns represent. Because you have a lot of different files that will all end up needing to get joined/merged etc, I think it would be great if, in your work flow, each time you pull in a new data set you run some code that systematizes the column names and that, when appropriate, includes a joining column such as bufferID or camera_sd id**

merging needs a common column. lets make a list of 15 and add it as a new column for each dataset. then we can merge them all. it will be deleted afterwards now merge the three together and rename the file "landuse"


**These steps are not necessary because you have a column called VALUE that already appears in each of the datasets. Try doing the merge just based on VALUE so you can clean up your code to only include necessary steps**
create the object

```{r}
number <- seq(1:15)
```

now add it to each of the dataframes using the mutate function

```{r}
fishers <- fishers %>%
  mutate(fishers, number=number)
porcupines_f <- porcupines_f %>%
  mutate(porcupines_f, number=number)
porcupines_m <- porcupines_m %>%
  mutate(porcupines_m, number=number)
```

Now merge the three together

```{r}
landuse <- merge(fishers,porcupines_f)%>%
  merge(porcupines_m) #the piping allows for the merging three dataframes 
```

lets remove the "number column" before we start flipping

```{r}
landuse$number <- NULL
```

the vegan stuff actually isn't going to work so we are outsourcing to the interweb

try to use the t() function

```{r}
landuse_transpose <- t(landuse)
```

look at it

```{r}
view(landuse_transpose)

```

This is doing somewhat what I want it to do but now the first row is what the column headers should be.

troubleshooting! using the janitor package

open the package (after installing)

```{r}
library(janitor)
```

Lets try it now

```{r}
landuse_transpose_fix <- landuse_transpose %>% row_to_names(row_number = 1)
```

something I would also like to do now is **Yes? Is what? Let's get the code cleaned up to get rid of statements like this that aren't doing much.  Also, now that it worked, get rid of the code that didn't give you what you want so that in future, you don't have to run code that doesn't get you what you want.**

IT WORKED!!!!

export the new file as a csv

**before you export as a csv, change the column names away from land use codes to land use categories to make the csv more self-explanatory and think about adding a column for camera and or buffer id. You can use `names` for the first and `mutate` for the seond**

```{r}
write.csv(landuse_transpose_fix, here("Data","Buffers_landuse_full.csv"), row.names = F) # add row.names = F when you write csv files to prevent the strange "X" in column names and to prevent addition of extra columns when you read in the data
```

## Other data

I want to use canopy density and tree species things but idk

## Sample camera data

playing around with the sample data

```{r}
cams 
```

# Joining Dataframes

clear environment

```{r}
rm(list = ls())
```

read in the dataframes we seek to join

```{r}
roads <- read.csv(here("Data","Buffers_roads.csv"))
landuse <- read.csv(here("Data","Buffers_landuse.csv"))
```

there are different number of observations between the two. I think renaming columns in the GIS software is the way to go for this one. **This will be much easier to deal with if, as per my suggestion at line 116 about apply constant naming to each file before it is written out**

so I am at the line of what I can do until I get back to one of the computers with arcpro on it

```{r}
cams <- read.csv(here("Data", "AssignedSpecies_through_2023-06-13.csv"))
```

hi
