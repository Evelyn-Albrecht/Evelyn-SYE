---
title: "Data_Preparation_edited"
author: "Evelyn Albrecht"
format: html
editor: visual
---

# Setting Up

### Clearing R's environment

```{r}
rm(list=ls())
```

### Loading relevant packages

```{r}
library(tidyverse) #bunch of packages combined to be one 
library(here) #assists in importing data sets 
library(janitor) #helps with reformating data 
```

# Data Clean-up

## Road Data

Import the data and give it a name

```{r}
roads <- read.csv(here("Data","Camera_buffer_roads.csv"))
```

preview the data

```{r}
glimpse(roads)
```

**See Erika comment on Data_preparation.qmd about getting the other data from GIS**

What we intend to use this data for is to determine the road density withing each buffer. Therefore we are going to need to rearrange this data so that we have a row entry per buffer and a total amount of road within it. The issue is that GIS takes takes the amount of road and segments it. It also has different entries for each of the roads that may be within the buffer. Therefore we will consolidate all of the road within a buffer into a single entry.

before we move on to getting these totals, lets rename the Shape_Leng column so that it makes more sense for our data.

```{r}
colnames(roads)[11] <- "road_length_m"
```

Now to reshape our data and find the total amount of road per buffer

### Calculating total amount of road per buffer

A prerequisite to any grouping is conversions of some values into factors. There are multiple variables that all represent the same thing, the buffer ID. We just need to choose one to convert and use for our variable.

I will choose to convert the variable cam_buffer into a factor variable

```{r}
roads$cam_buffer <- as.factor(roads$cam_buffer)
```

If we glimpse again we can see that it is now registered as a factor with 287 levels. Because we have a total of 516 buffers, this means that there is not necessarily a road within each buffer. This means that there will be gaps and N/As that we will have to mind when joining this dataframe(or the new one we create) to the landuse one.

Lets create a new dataframe "buffers_roads"

```{r}
buffer_roads <- roads %>%
     group_by(cam_buffer) %>%
     summarise(
          total_length = sum(road_length_m)
     )
```

our variable titled "distance" is actually just the radius (km) of the buffer. lets change the name of the variable to represent that

```{r}
colnames(roads)[c(4)] <- "radius"
```

Now lets create a new column for the total area of the buffer to compare the total amount of road by

```{r}
roads <- roads %>% mutate(
  buffer_area_km2 = pi * radius * radius
)
```

Now lets find the ratio of m road to square km of buffer

```{r}
roads <- roads %>% mutate(
  road_density = road_length_m/buffer_area_km2
)
```

Lets take a quick look at this new dataframe

```{r}
view(buffer_roads)
```

looks good now we shall export the dataframe

```{r}
write.csv(buffer_roads, here("Data","Buffers_roads.csv"),row.names = F)# add row.names = F when you write csv files to prevent the strange "X" in column names and to prevent addition of extra columns when you read in the data
```

We now have a new csv file containing only this data. yay!

```{r}
buffer_roads <- roads %>%
     group_by(cam_buffer) %>%
     summarise(
          total_length = sum(road_length_m)
     )
```

## Landuse Data

Before moving onto altering the landuse data, let's clear our environment again

```{r}
rm(list = ls())
```

### Reading in and merging datasets

because GIS wouldnt export all 516 values in the table at once, I divided the exports into three csv files, one for fishers, one for female porcupines, and one for male porcupines. here I will merge them all together.

Read in the three datasets

```{r}
fishers <- read.csv(here("Data","PEPE_landuse.csv"))
porcupines_f <- read.csv(here("Data","ERDO_F_landuse.csv"))
porcupines_m <- read.csv(here("Data","ERDO_M_landuse.csv"))
```

**I'm very uncomfortable with how all of the rows and columns are named here without any explaination in the qmd file. I'd also like to see you add a column that has the land use category change the column names to correspond to the actual things that the columns represent. Because you have a lot of different files that will all end up needing to get joined/merged etc, I think it would be great if, in your work flow, each time you pull in a new data set you run some code that systematizes the column names and that, when appropriate, includes a joining column such as bufferID or camera_sd id**

## FIX THIS!!!

Now merge the three together

```{r}
landuse <- merge(fishers,porcupines_f)%>%
  merge(porcupines_m) #the piping allows for the merging three dataframes 
```

Now time to flip the data into the way we want it to be

try to use the t() function

```{r}
landuse_transpose <- t(landuse)
```

This is doing somewhat what I want it to do but now the first row is what the column headers should be.

Use the Janitor package to convert the first row to the column headers

```{r}
landuse_transpose_fix <- landuse_transpose %>% row_to_names(row_number = 1)
```

before you export as a csv, change the column names away from land use codes to land use categories to make the csv more self-explanatory and think about adding a column for camera and or buffer id. You can use names for the first and mutate for the second

Change the values of the land use classes from number codes to descriptors

```{r}
colnames(landuse_transpose_fix)[1] <- "open_water"
colnames(landuse_transpose_fix)[2] <- "developed_open_space"
colnames(landuse_transpose_fix)[3] <- "developed_low_intensity"
colnames(landuse_transpose_fix)[4] <- "developed_medium_inensity"
colnames(landuse_transpose_fix)[5] <- "developed_high_intensity"
colnames(landuse_transpose_fix)[6] <- "barren_land"
colnames(landuse_transpose_fix)[7] <- "deciduous_forest"
colnames(landuse_transpose_fix)[8] <- "evergreen_forest"
colnames(landuse_transpose_fix)[9] <- "mixed_forest"
colnames(landuse_transpose_fix)[10] <- "shrub_scrub"
colnames(landuse_transpose_fix)[11] <- "grassland_herbaceous"
colnames(landuse_transpose_fix)[12] <- "pasture_hay"
colnames(landuse_transpose_fix)[13] <- "cultivated_crops"
colnames(landuse_transpose_fix)[14] <- "woody_wetlands"
colnames(landuse_transpose_fix)[15] <- "emergent_herbaceous_wetlands"

```

```{r}
write.csv(landuse_transpose_fix, here("Data","Buffers_landuse_full.csv"), row.names = F) # add row.names = F when you write csv files to prevent the strange "X" in column names and to prevent addition of extra columns when you read in the data
```

## creating columns for totals and percents

clear environment for convenience

```{r}
rm(list = ls())
```

read in the data we are going to alter

```{r}
landuse <- read.csv(here("Data","Buffers_landuse_full.csv"))
```

Create a new column for the total amount of area in each buffer

```{r}
landuse <- landuse %>% mutate(total_area = rowSums(across(where(is.numeric)))) 
```

lets take a look at what we've made

```{r}
glimpse(landuse)
```

### Adding percent columns

now we see that there is a new column with the total area

now we need to create 15 more columns each representing the percent of the area that they make up.

use the mutate function to create new columns with a calculated percent of area of buffer covered by each landuse class.

```{r}
landuse <- landuse %>% mutate(
  p_open_water = (open_water/total_area)*100,
    p_developed_open_space = (developed_open_space/total_area)*100,
    p_developed_low_intesnsity = (developed_low_intensity/total_area)*100,
    p_developed_medium_inensity = (developed_medium_inensity/total_area)*100,
    p_developed_high_intensity = (developed_high_intensity/total_area)*100, 
    p_barren_land = (barren_land/total_area)*100, 
    p_deciduous_forest = (deciduous_forest/total_area)*100,
    p_evergreen_forest = (evergreen_forest/total_area)*100, 
    p_mixed_forest = (mixed_forest/total_area)*100,
    p_shrub_scrub = (shrub_scrub/total_area)*100, 
    p_grassland_herbaceous = (grassland_herbaceous/total_area)*100,
    p_pasture_hay = (pasture_hay/total_area)*100, 
    p_cultivated_crops = (cultivated_crops/total_area)*100, 
    p_woody_wetlands = (woody_wetlands/total_area)*100, 
    p_emergent_herbaceous_wetlands = (emergent_herbaceous_wetlands/total_area)*100
)
```

### Combining landuse classes

We would also like to know how much is forest and how much is developed and forest. to do this we need to add up the respective columns.

first create a new variable that is the total area of developed land and the total amount of forested land

```{r}
landuse <- landuse %>% mutate(
  total_developed = developed_open_space + developed_low_intensity + developed_medium_inensity + developed_high_intensity, 
  total_forest = deciduous_forest + evergreen_forest + mixed_forest
)
```

Now create a new column that will give us the percent of developed and forest in each buffer

```{r}
landuse <- landuse %>% mutate(
  percent_developed = (total_developed/total_area)*100, 
  percent_forest = (total_forest/total_area)*100
)
```

# Reformatting into a useable matrix
